[
    {
        "id": "p00001.html",
        "answer": "#include <iostream>\n#include <algorithm>\n\nusing namespace std;\n\nint main() {\n    int heights[10]; // array to store the heights of the mountains\n    int i; // loop counter\n\n    // read the heights of the mountains from the input\n    for (i = 0; i < 10; i++) {\n        cin >> heights[i];\n    }\n\n    // sort the list of heights in descending order\n    sort(heights, heights + 10, greater<int>());\n\n    // print the top three heights\n    for (i = 0; i < 3; i++) {\n        cout << \"Height of the \" << (i + 1) << \"st mountain: \" << heights[i] << endl;\n    }\n\n    return 0;\n}"
    },
    {
        "id": "p00002.html",
        "answer": "cpp\n// Problem name: Digit Number\n\n#include <iostream>\n\nusing namespace std;\n\nint main() {\n    int a, b, sum, digitCount;\n\n    // Read input from stdin\n    while (cin >> a >> b) {\n        sum = a + b;\n        digitCount = 0;\n\n        // Calculate the number of digits in the sum\n        while (sum > 0) {\n            sum /= 10;\n            digitCount++;\n        }\n\n        // Print the result for the current data set\n        cout << \"Dataset: \" << a << \" + \" << b << \" = \" << sum << \" digits: \" << digitCount << endl;\n    }\n\n    return 0;\n}"
    },
    {
        "id": "p00003.html",
        "answer": ""
    },
    {
        "id": "p00004.html",
        "answer": "#include <cmath>\n#include <iostream>\n\nusing namespace std;\n\nint main() {\n    double a = 1, b = 2, c = 3, d = 4, e = 5, f = 6;\n    double x, y;\n\n    // Solve the system of equations\n    x = (c * d - b * e) / (a * d - b * c);\n    y = (a * f - c * e) / (a * d - b * c);\n\n    // Round the solution to three decimal places\n    x = round(x * 1000) / 1000;\n    y = round(y * 1000) / 1000;\n\n    // Print the solution\n    cout << fixed << setprecision(3) << x << \" \" << y << endl;\n\n    return 0;\n}"
    },
    {
        "id": "p00006.html",
        "answer": "#include <iostream>\n#include <string>\n\nint main() {\n    // Declare variables\n    std::string str;\n    std::string revStr;\n\n    // Get the input string\n    std::cout << \"Enter a string (max 20 characters): \";\n    std::getline(std::cin, str);\n\n    // Reverse the string\n    revStr = str;\n    std::reverse(revStr.begin(), revStr.end());\n\n    // Print the reversed string\n    std::cout << \"Reversed string: \" << revStr << std::endl;\n\n    return 0;\n}"
    },
    {
        "id": "p00007.html",
        "answer": "#include <iostream>\n\nusing namespace std;\n\nint main() {\n    int n; // number of weeks\n    int debt = 100000; // initial debt\n    int interest = 5; // interest rate (5%)\n\n    cin >> n; // read number of weeks from input\n\n    for (int i = 0; i < n; i++) {\n        debt += (debt * interest) / 100; // calculate interest for current week\n        debt = (debt + 999) / 1000 * 1000; // round interest to nearest 1,000 yen above\n    }\n\n    cout << \"The amount of the debt in \" << n << \" weeks is: \" << debt << endl;\n\n    return 0;\n}"
    },
    {
        "id": "p00008.html",
        "answer": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nint main() {\n    int n;\n    cin >> n;\n    int count = 0;\n    vector<int> a(10), b(10), c(10), d(10);\n    for (int i = 0; i < 10; i++) {\n        a[i] = i;\n        b[i] = i;\n        c[i] = i;\n        d[i] = i;\n    }\n    sort(a.begin(), a.end());\n    sort(b.begin(), b.end());\n    sort(c.begin(), c.end());\n    sort(d.begin(), d.end());\n    for (int i = 0; i < 10; i++) {\n        for (int j = i + 1; j < 10; j++) {\n            for (int k = j + 1; k < 10; k++) {\n                for (int l = k + 1; l < 10; l++) {\n                    int sum = a[i] + b[j] + c[k] + d[l];\n                    if (sum == n) {\n                        count++;\n                    }\n                }\n            }\n        }\n    }\n    cout << count << endl;\n    return 0;\n}"
    },
    {
        "id": "p00009.html",
        "answer": "#include <iostream>\n\nint main() {\n    int n;\n    std::cin >> n;\n\n    // The number of prime numbers less than or equal to n\n    int primeCount = 0;\n\n    // Iterate from 2 to n\n    for (int i = 2; i <= n; i++) {\n        // Check if i is prime\n        bool isPrime = true;\n        for (int j = 2; j < i; j++) {\n            if (i % j == 0) {\n                isPrime = false;\n                break;\n            }\n        }\n\n        // If i is prime, increase the prime count\n        if (isPrime) {\n            primeCount++;\n        }\n    }\n\n    // Print the result\n    std::cout << \"There are \" << primeCount << \" prime numbers less than or equal to \" << n << \".\" << std::endl;\n\n    return 0;\n}"
    },
    {
        "id": "p00010.html",
        "answer": "#include <cmath>\n\nusing namespace std;\n\nint main() {\n    int n;\n    cin >> n;\n\n    // loop through all datasets\n    for (int i = 0; i < n; i++) {\n        double x1, y1, x2, y2, x3, y3;\n        cin >> x1 >> y1 >> x2 >> y2 >> x3 >> y3;\n\n        // calculate the circumcenter of the triangle\n        double a = x1 - x2;\n        double b = y1 - y2;\n        double c = x2 - x3;\n        double d = y2 - y3;\n        double e = a * a + b * b;\n        double f = c * c + d * d;\n        double g = a * c + b * d;\n        double h = a * d - b * c;\n        double r = sqrt(e + f - g - h);\n\n        // calculate the central coordinate of the circumscribed circle\n        double px = (a * h - b * g) / (2 * r);\n        double py = (c * h - d * g) / (2 * r);\n\n        // print the solution\n        cout << fixed << setprecision(3) << px << \" \" << py << \" \" << r << endl;\n    }\n\n    return 0;\n}"
    },
    {
        "id": "p00011.html",
        "answer": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\n// A structure to represent a single horizontal line\nstruct HorizontalLine {\n    int a; // The first vertical line intersected by the horizontal line\n    int b; // The second vertical line intersected by the horizontal line\n};\n\n// A function to swap two numbers\nvoid swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\n// A function to apply a single horizontal line to the Amidakuji state\nvoid applyHorizontalLine(vector<int>& state, HorizontalLine line) {\n    // Swap the numbers at the intersections of the horizontal line and the vertical lines\n    swap(state[line.a], state[line.b]);\n}\n\n// A function to apply all horizontal lines to the Amidakuji state\nvoid applyHorizontalLines(vector<int>& state, vector<HorizontalLine>& lines) {\n    for (const auto& line : lines) {\n        applyHorizontalLine(state, line);\n    }\n}\n\n// A function to print the final state of the Amidakuji\nvoid printFinalState(vector<int>& state) {\n    for (int i = 0; i < state.size(); i++) {\n        cout << state[i] << \" \";\n    }\n    cout << endl;\n}\n\nint main() {\n    int w, n; // The number of vertical lines and horizontal lines, respectively\n    cin >> w >> n;\n\n    // Initialize the Amidakuji state with the numbers 1, 2, 3, ..., w\n    vector<int> state(w, 0);\n    for (int i = 0; i < w; i++) {\n        state[i] = i + 1;\n    }\n\n    // Read and apply all horizontal lines\n    vector<HorizontalLine> lines;\n    for (int i = 0; i < n; i++) {\n        int a, b;\n        cin >> a >> b;\n        lines.push_back({a, b});\n    }\n    applyHorizontalLines(state, lines);\n\n    // Print the final state of the Amidakuji\n    printFinalState(state);\n\n    return 0;\n}"
    },
    {
        "id": "p00012.html",
        "answer": "#include <cmath>\n#include <iostream>\n\nusing namespace std;\n\n// Function to calculate the distance between two points\ndouble distance(double x1, double y1, double x2, double y2) {\n    return sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n}\n\n// Function to determine if a point is in a triangle\nbool isInTriangle(double x1, double y1, double x2, double y2, double x3, double y3, double xp, double yp) {\n    double side1 = distance(x1, y1, x2, y2);\n    double side2 = distance(x2, y2, x3, y3);\n    double side3 = distance(x3, y3, x1, y1);\n    double hypotenuse = distance(xp, yp, x1, y1);\n\n    // Check if the point is within the triangle\n    if (side1 * side1 + side2 * side2 + side3 * side3 - hypotenuse * hypotenuse > 0) {\n        return true;\n    }\n\n    return false;\n}\n\nint main() {\n    double x1, y1, x2, y2, x3, y3, xp, yp;\n\n    // Read input data\n    while (cin >> x1 >> y1 >> x2 >> y2 >> x3 >> y3 >> xp >> yp) {\n        // Check if the point is in the triangle\n        if (isInTriangle(x1, y1, x2, y2, x3, y3, xp, yp)) {\n            cout << \"YES\" << endl;\n        } else {\n            cout << \"NO\" << endl;\n        }\n    }\n\n    return 0;\n}"
    },
    {
        "id": "p00013.html",
        "answer": "#include <iostream>\n#include <vector>\n#include <queue>\n\nusing namespace std;\n\n// A structure to represent a car\nstruct Car {\n    int number;\n    bool isInTrack;\n};\n\n// A function to simulate the movement of cars\nvoid simulateCars(vector<Car> &cars, int entrance, int exit) {\n    // Initialize an empty queue to store cars that exit the track\n    priority_queue<Car, vector<Car>, greater<Car>> exitQueue;\n\n    // Loop through the input sequence\n    for (int i = 0; i < cars.size(); i++) {\n        // If the current car is entering the track\n        if (cars[i].number != 0) {\n            // Add the car to the track\n            cars[i].isInTrack = true;\n        } else {\n            // If the current car is exiting the track\n            if (cars[i].isInTrack) {\n                // Add the car to the exit queue\n                exitQueue.push(cars[i]);\n            }\n        }\n    }\n\n    // Print the cars that exit the track in order\n    while (!exitQueue.empty()) {\n        cout << exitQueue.top().number << \" \";\n        exitQueue.pop();\n    }\n}\n\n// Main function\nint main() {\n    // Initialize an empty vector to store cars\n    vector<Car> cars;\n\n    // Read the input sequence\n    int entrance, exit;\n    cin >> entrance >> exit;\n\n    // Add cars to the vector\n    for (int i = 0; i < entrance; i++) {\n        Car car;\n        cin >> car.number;\n        car.isInTrack = false;\n        cars.push_back(car);\n    }\n\n    // Simulate the movement of cars\n    simulateCars(cars, entrance, exit);\n\n    return 0;\n}"
    },
    {
        "id": "p00014.html",
        "answer": "#include <cmath>\n#include <iostream>\n\nusing namespace std;\n\nint main() {\n    int d;\n    cin >> d;\n\n    // Calculate the area of the shape\n    double area = 0;\n    for (int i = 0; i < 600; i += d) {\n        double height = pow(d, 2);\n        area += (height * d);\n    }\n\n    // Print the area\n    cout << \"The area is: \" << area << endl;\n\n    return 0;\n}"
    },
    {
        "id": "p00015.html",
        "answer": "#include <iostream>\n#include <cmath>\n\nint main() {\n    int N;\n    std::cin >> N;\n\n    for (int i = 0; i < N; i++) {\n        int a, b;\n        std::cin >> a >> b;\n\n        int sum = a + b;\n\n        if (sum > 81LL * 1000000000) { // 81 trillion yen\n            std::cout << \"overflow\" << std::endl;\n        } else {\n            std::cout << sum << std::endl;\n        }\n    }\n\n    return 0;\n}"
    },
    {
        "id": "p00016.html",
        "answer": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint main() {\n    int d, t;\n    int x = 0, y = 0;\n\n    while (true) {\n        cin >> d >> t;\n        if (d == 0 && t == 0) break;\n\n        x += d;\n        y += t;\n\n        // Turn clockwise by degrees equivalent to the second integer\n        y += t * 180 / 3.14159;\n    }\n\n    cout << x << endl << y << endl;\n\n    return 0;\n}"
    },
    {
        "id": "p00017.html",
        "answer": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint main() {\n    int shift; // shift value\n    string text; // input text\n    string decodedText; // decoded text\n\n    // read the shift value\n    cin >> shift;\n\n    // read the text\n    getline(cin, text);\n\n    // decode the text\n    for (int i = 0; i < text.size(); i++) {\n        char c = text[i];\n        if (c >= 'a' && c <= 'z') {\n            c = (c + shift - 'a') % 26 + 'a';\n        }\n        decodedText += c;\n    }\n\n    // print the decoded text\n    cout << decodedText << endl;\n\n    return 0;\n}"
    },
    {
        "id": "p00018.html",
        "answer": "#include <iostream>\n\nint main() {\n    int a, b, c, d, e; // declare variables for the five numbers\n\n    // read the five numbers from the input\n    std::cout << \"Enter five numbers: \";\n    std::cin >> a >> b >> c >> d >> e;\n\n    // sort the numbers in descending order\n    std::sort(std::vector<int>{a, b, c, d, e}, [](int a, int b) {\n        return b > a;\n    });\n\n    // print the sorted numbers\n    std::cout << \"Sorted numbers: \";\n    for (const auto& num : std::vector<int>{a, b, c, d, e}) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n\n    return 0;\n}"
    },
    {
        "id": "p00019.html",
        "answer": "#include <iostream>\n\nint main() {\n    int n; // variable to store the input value\n    int factorial = 1; // initialize factorial with 1\n\n    // read the input value from the user\n    std::cout << \"Enter a value for n (1 <= n <= 20): \";\n    std::cin >> n;\n\n    // calculate the factorial\n    for (int i = 1; i <= n; i++) {\n        factorial *= i;\n    }\n\n    // print the factorial\n    std::cout << \"The factorial of \" << n << \" is: \" << factorial << std::endl;\n\n    return 0;\n}"
    },
    {
        "id": "p00020.html",
        "answer": "#include <iostream>\n#include <cctype>\n\nusing namespace std;\n\nint main() {\n    string text;\n    cin >> text; // read the input text\n\n    // iterate through each character in the text\n    for (char& c : text) {\n        // if the character is a lowercase letter\n        if (islower(c)) {\n            // convert it to the corresponding capital letter\n            c = toupper(c);\n        }\n    }\n\n    // print the converted text\n    cout << text << endl;\n\n    return 0;\n}"
    },
    {
        "id": "p00021.html",
        "answer": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint main() {\n    int n;\n    cin >> n;\n\n    for (int i = 0; i < n; i++) {\n        double x1, y1, x2, y2, x3, y3, x4, y4;\n        cin >> x1 >> y1 >> x2 >> y2 >> x3 >> y3 >> x4 >> y4;\n\n        double slopeAB = (y2 - y1) / (x2 - x1);\n        double slopeCD = (y4 - y3) / (x4 - x3);\n\n        if (slopeAB == slopeCD) {\n            cout << \"YES\" << endl;\n        } else {\n            cout << \"NO\" << endl;\n        }\n    }\n\n    return 0;\n}"
    },
    {
        "id": "p00022.html",
        "answer": "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nint main() {\n    int n;\n    cin >> n;\n    vector<int> a(n);\n    for (int i = 0; i < n; i++) {\n        cin >> a[i];\n    }\n\n    int maxSum = 0;\n    int currSum = 0;\n    for (int i = 0; i < n; i++) {\n        currSum += a[i];\n        maxSum = max(maxSum, currSum);\n        if (currSum < 0) {\n            currSum = 0;\n        }\n    }\n\n    cout << \"Maximum sum: \" << maxSum << endl;\n    return 0;\n}"
    },
    {
        "id": "p00023.html",
        "answer": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\n// Function to calculate the distance between two points\ndouble distance(double x1, double y1, double x2, double y2) {\n    return sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n}\n\n// Function to determine if two circles intersect\nint intersect(double x1, double y1, double r1, double x2, double y2, double r2) {\n    double d = distance(x1, y1, x2, y2);\n    if (d <= r1 + r2) {\n        return 1;\n    }\n    return 0;\n}\n\nint main() {\n    int N;\n    cin >> N;\n\n    for (int i = 0; i < N; i++) {\n        double xa, ya, ra, xb, yb, rb;\n        cin >> xa >> ya >> ra >> xb >> yb >> rb;\n\n        if (intersect(xa, ya, ra, xb, yb, rb)) {\n            cout << \"1\" << endl;\n        } else {\n            cout << \"0\" << endl;\n        }\n    }\n\n    return 0;\n}"
    },
    {
        "id": "p00024.html",
        "answer": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint main() {\n    double velocity; // minimum velocity to crack the ball\n    double floor; // lowest possible floor where the ball cracks\n\n    while (cin >> velocity) { // read velocity from input\n        floor = 5 * (int(velocity / 9.8) + 1); // calculate lowest possible floor\n        cout << floor << endl; // print the result\n    }\n\n    return 0;\n}"
    },
    {
        "id": "p00025.html",
        "answer": ""
    },
    {
        "id": "p00026.html",
        "answer": ") for clear formatting.\n\nHere's the C++ solution:"
    },
    {
        "id": "p00027.html",
        "answer": "#include <iostream>\n#include <time.h>\n\nusing namespace std;\n\nint main() {\n    int month, day, year = 2004;\n    cin >> month >> day;\n    while (month != 0 && day != 0) {\n        // Calculate the day of the week\n        int dow = (day + (month - 1) * 3) % 7;\n        switch (dow) {\n            case 1:\n                cout << \"Monday\" << endl;\n                break;\n            case 2:\n                cout << \"Tuesday\" << endl;\n                break;\n            case 3:\n                cout << \"Wednesday\" << endl;\n                break;\n            case 4:\n                cout << \"Thursday\" << endl;\n                break;\n            case 5:\n                cout << \"Friday\" << endl;\n                break;\n            case 6:\n                cout << \"Saturday\" << endl;\n                break;\n            case 0:\n                cout << \"Sunday\" << endl;\n                break;\n        }\n        cin >> month >> day;\n    }\n    return 0;\n}"
    },
    {
        "id": "p00028.html",
        "answer": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nint main() {\n    int arr[100]; // array to store input integers\n    int n; // number of integers in the sequence\n    int mode[100] = {0}; // array to store mode values\n    int max_mode = 0; // maximum mode value\n    int curr_mode = 0; // current mode value\n\n    // read input sequence\n    cin >> n;\n    for (int i = 0; i < n; i++) {\n        cin >> arr[i];\n    }\n\n    // calculate mode values\n    for (int i = 0; i < n; i++) {\n        mode[arr[i]]++;\n        if (mode[arr[i]] > max_mode) {\n            max_mode = mode[arr[i]];\n            curr_mode = arr[i];\n        }\n    }\n\n    // print mode values\n    cout << \"Mode values: \";\n    for (int i = 0; i < n; i++) {\n        if (mode[arr[i]] == max_mode) {\n            cout << curr_mode << \" \";\n        }\n    }\n    cout << endl;\n\n    return 0;\n}"
    },
    {
        "id": "p00030.html",
        "answer": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nint main() {\n    int n, s;\n    cin >> n >> s;\n\n    if (n == 0) {\n        cout << 1 << endl;\n        return 0;\n    }\n\n    vector<int> nums(n);\n    for (int i = 0; i < n; i++) {\n        cin >> nums[i];\n    }\n\n    sort(nums.begin(), nums.end());\n\n    int count = 0;\n    for (int i = 0; i < n; i++) {\n        int sum = 0;\n        for (int j = i; j < n; j++) {\n            sum += nums[j];\n            if (sum == s) {\n                count++;\n            }\n        }\n    }\n\n    cout << count << endl;\n\n    return 0;\n}"
    },
    {
        "id": "p00031.html",
        "answer": "#include <iostream>\n\nusing namespace std;\n\nint main() {\n    int num_datasets = 50; // number of datasets\n    int dataset[num_datasets]; // array to store input data\n    int result[num_datasets]; // array to store output data\n\n    // read input data\n    for (int i = 0; i < num_datasets; i++) {\n        cin >> dataset[i];\n    }\n\n    // calculate and output result\n    for (int i = 0; i < num_datasets; i++) {\n        int sum = 0; // sum of weights\n        int count = 0; // number of weights\n\n        // find the maximum weight that can be placed on the right pan\n        for (int j = 0; j < 10; j++) {\n            int weight = 1 << j; // weight of 2^j grams\n            if (weight <= dataset[i]) {\n                sum += weight;\n                count++;\n            }\n        }\n\n        // output the result\n        cout << \"1 \" << count << endl;\n\n        // print the weights in increasing order\n        for (int j = 0; j < count; j++) {\n            int weight = 1 << j;\n            cout << weight << \" \";\n        }\n        cout << endl;\n    }\n\n    return 0;\n}"
    },
    {
        "id": "p00032.html",
        "answer": ""
    },
    {
        "id": "p00033.html",
        "answer": ""
    },
    {
        "id": "p00034.html",
        "answer": ""
    },
    {
        "id": "p00035.html",
        "answer": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint main() {\n    int xa, ya, xb, yb, xc, yc, xd, yd;\n    cin >> xa >> ya >> xb >> yb >> xc >> yc >> xd >> yd;\n\n    // Check if the points are collinear\n    if (((xb - xa) * (yc - ya)) == 0) {\n        cout << \"NO\" << endl;\n        return 0;\n    }\n\n    // Calculate the slope of the line passing through points A and B\n    double slopeAB = (yb - ya) / (xb - xa);\n\n    // Check if the point C is on the line passing through points A and B\n    if (((xc - xa) * slopeAB) == 0) {\n        cout << \"NO\" << endl;\n        return 0;\n    }\n\n    // Calculate the slope of the line passing through points C and D\n    double slopeCD = (yd - yc) / (xd - xc);\n\n    // Check if the point B is on the line passing through points C and D\n    if (((xb - xc) * slopeCD) == 0) {\n        cout << \"NO\" << endl;\n        return 0;\n    }\n\n    // Check if the point A is on the line passing through points B and D\n    if (((xa - xb) * (yd - yb)) == 0) {\n        cout << \"NO\" << endl;\n        return 0;\n    }\n\n    // All checks passed, output YES\n    cout << \"YES\" << endl;\n\n    return 0;\n}"
    },
    {
        "id": "p00037.html",
        "answer": ""
    },
    {
        "id": "p00038.html",
        "answer": "cpp\nstruct PokerHand {\n    int card1;\n    int card2;\n    int card3;\n    int card4;\n    int card5;\n    string hand;\n};"
    },
    {
        "id": "p00039.html",
        "answer": "#include <iostream>\n\nusing namespace std;\n\nint main() {\n    string romanNumeral; // input Roman numeral\n    int arabicNumeral = 0; // output Arabic numeral\n\n    // get the Roman numeral from the user\n    cout << \"Enter a Roman numeral: \";\n    cin >> romanNumeral;\n\n    // iterate through each character in the Roman numeral\n    for (char character : romanNumeral) {\n        // apply the conversion rules based on the character\n        switch (character) {\n            case 'I':\n                arabicNumeral += 1;\n                break;\n            case 'V':\n                arabicNumeral += 5;\n                break;\n            case 'X':\n                arabicNumeral += 10;\n                break;\n            case 'L':\n                arabicNumeral += 50;\n                break;\n            case 'C':\n                arabicNumeral += 100;\n                break;\n            case 'D':\n                arabicNumeral += 500;\n                break;\n            case 'M':\n                arabicNumeral += 1000;\n                break;\n        }\n    }\n\n    // output the converted Arabic numeral\n    cout << \"The Arabic numeral equivalent of \" << romanNumeral << \" is: \" << arabicNumeral << endl;\n\n    return 0;\n}"
    },
    {
        "id": "p00040.html",
        "answer": "#include <iostream>\n#include <string>\n#include <cmath>\n\nusing namespace std;\n\n// Function to encode a message using the Affine Cipher\nstring encode(string message, int alpha, int beta) {\n  string encodedMessage;\n  for (int i = 0; i < message.size(); i++) {\n    int gamma = message[i] - 'a';\n    int fGamma = (alpha * gamma + beta) % 26;\n    encodedMessage += char(fGamma + 'a');\n  }\n  return encodedMessage;\n}\n\n// Function to decode a message using the Affine Cipher\nstring decode(string message, int alpha, int beta) {\n  string decodedMessage;\n  for (int i = 0; i < message.size(); i++) {\n    int fGamma = message[i] - 'a';\n    int gamma = (fGamma - beta) % 26;\n    decodedMessage += char(gamma + 'a');\n  }\n  return decodedMessage;\n}\n\nint main() {\n  int n;\n  cin >> n;\n  for (int i = 0; i < n; i++) {\n    string message;\n    cin >> message;\n    int alpha, beta;\n    cin >> alpha >> beta;\n    string encodedMessage = encode(message, alpha, beta);\n    string decodedMessage = decode(encodedMessage, alpha, beta);\n    cout << \"For data set \" << i + 1 << \": \" << decodedMessage << endl;\n  }\n  return 0;\n}"
    },
    {
        "id": "p00041.html",
        "answer": "#include <iostream>\n#include <string>\n#include <utility>\n\nusing namespace std;\n\nint main() {\n    int a, b, c, d;\n    cin >> a >> b >> c >> d;\n    int numCases = 40;\n    int cases[numCases][4] = {};\n    for (int i = 0; i < numCases; i++) {\n        cin >> cases[i][0] >> cases[i][1] >> cases[i][2] >> cases[i][3];\n    }\n    cout << \"Case 1:\" << endl;\n    solve(cases[0], a, b, c, d);\n    cout << \"Case 2:\" << endl;\n    solve(cases[1], a, b, c, d);\n    // ...\n    cout << \"Case 40:\" << endl;\n    solve(cases[39], a, b, c, d);\n    return 0;\n}\n\nvoid solve(int caseIdx, int a, int b, int c, int d) {\n    string formula;\n    int result = 0;\n    // Try all possible combinations of operators\n    for (int op1 = 0; op1 < 3; op1++) {\n        for (int op2 = 0; op2 < 3; op2++) {\n            if (op1 == op2) continue;\n            int num1 = 0;\n            int num2 = 0;\n            switch (op1) {\n                case 0:\n                    num1 = a;\n                    break;\n                case 1:\n                    num1 = b;\n                    break;\n                case 2:\n                    num1 = c;\n                    break;\n            }\n            switch (op2) {\n                case 0:\n                    num2 = d;\n                    break;\n                case 1:\n                    num2 = a;\n                    break;\n                case 2:\n                    num2 = b;\n                    break;\n            }\n            int res = num1 * num2;\n            if (res == 10) {\n                formula = \"(\" + to_string(num1) + \" * \" + to_string(num2) + \")\";\n                break;\n            }\n        }\n        if (formula.empty()) continue;\n        cout << \"Case \" << caseIdx + 1 << \": \" << formula << endl;\n        return;\n    }\n    cout << \"Case \" << caseIdx + 1 << \": 0\" << endl;\n}"
    },
    {
        "id": "p00042.html",
        "answer": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\n// Function to calculate the maximum value that can be carried by the blanket\nint maxValue(int W, int N, int* v, int* w) {\n    sort(v, v + N, greater<int>()); // Sort the treasures by value in descending order\n    sort(w, w + N, greater<int>()); // Sort the weights by weight in descending order\n\n    int max_value = 0;\n    int cur_weight = 0;\n\n    for (int i = 0; i < N; i++) {\n        if (cur_weight + w[i] <= W) {\n            max_value += v[i];\n            cur_weight += w[i];\n        } else {\n            break;\n        }\n    }\n\n    return max_value;\n}\n\n// Function to print the result\nvoid printResult(int caseNumber, int maxValue, int curWeight) {\n    cout << \"Case \" << caseNumber << \": \" << maxValue << \" \" << curWeight << endl;\n}\n\nint main() {\n    int W, N;\n    cin >> W >> N;\n\n    int* v = new int[N];\n    int* w = new int[N];\n\n    for (int i = 0; i < N; i++) {\n        cin >> v[i] >> w[i];\n    }\n\n    int max_value = maxValue(W, N, v, w);\n\n    printResult(1, max_value, W);\n\n    delete[] v;\n    delete[] w;\n\n    return 0;\n}"
    },
    {
        "id": "p00043.html",
        "answer": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nint main() {\n    int num;\n    cin >> num;\n    vector<int> nums(13);\n    for (int i = 0; i < 13; i++) {\n        nums[i] = num % 10;\n        num /= 10;\n    }\n\n    int missingNumber = solvePuzzle(nums);\n    if (missingNumber == 0) {\n        cout << \"No solution.\" << endl;\n    } else {\n        cout << missingNumber << endl;\n    }\n    return 0;\n}\n\nint solvePuzzle(vector<int> nums) {\n    int missingNumber = 0;\n    // Check if there are any duplicate numbers\n    for (int i = 0; i < 13; i++) {\n        if (nums[i] == nums[i + 1]) {\n            return 0;\n        }\n    }\n\n    // Check if there are any consecutive numbers\n    for (int i = 0; i < 12; i++) {\n        if (nums[i] + 1 == nums[i + 1]) {\n            return 0;\n        }\n    }\n\n    // Try all possible combinations of 3 numbers\n    for (int i = 0; i < 13; i++) {\n        for (int j = i + 1; j < 13; j++) {\n            for (int k = j + 1; k < 13; k++) {\n                if (nums[i] + nums[j] + nums[k] == 15) {\n                    missingNumber = nums[i] * 100 + nums[j] * 10 + nums[k];\n                    break;\n                }\n            }\n            if (missingNumber != 0) {\n                break;\n            }\n        }\n        if (missingNumber != 0) {\n            break;\n        }\n    }\n\n    return missingNumber;\n}"
    },
    {
        "id": "p00045.html",
        "answer": "#include <iostream>\n#include <string>\n#include <sstream>\n#include <vector>\n\nusing namespace std;\n\nint main() {\n    int totalSales = 0;\n    int totalQuantity = 0;\n    int averageQuantity = 0;\n\n    vector<pair<int, int>> salesData;\n\n    // Read input data\n    string line;\n    while (getline(cin, line)) {\n        stringstream ss(line);\n        int price, quantity;\n        ss >> price >> quantity;\n        salesData.push_back({price, quantity});\n    }\n\n    // Calculate total sales and average quantity\n    for (const auto& sale : salesData) {\n        totalSales += sale.first * sale.second;\n        totalQuantity += sale.second;\n    }\n    averageQuantity = totalQuantity / salesData.size();\n\n    // Round average quantity to nearest integer\n    averageQuantity = round(averageQuantity);\n\n    // Output results\n    cout << \"Total sales: \" << totalSales << endl;\n    cout << \"Average quantity: \" << averageQuantity << endl;\n\n    return 0;\n}"
    },
    {
        "id": "p00046.html",
        "answer": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nint main() {\n    vector<double> mountainHeights;\n\n    // Read input data\n    double height;\n    while (cin >> height) {\n        mountainHeights.push_back(height);\n    }\n\n    // Find maximum and minimum values\n    double maxHeight = *max_element(mountainHeights.begin(), mountainHeights.end());\n    double minHeight = *min_element(mountainHeights.begin(), mountainHeights.end());\n\n    // Calculate difference\n    double heightDifference = maxHeight - minHeight;\n\n    // Output difference\n    cout << fixed << setprecision(2) << heightDifference << endl;\n\n    return 0;\n}"
    },
    {
        "id": "p00047.html",
        "answer": "#include <iostream>\n#include <string>\n#include <vector>\n\nusing namespace std;\n\n// \u30ab\u30c3\u30d7\u306e\u4f4d\u7f6e\u3092\u8868\u3059\u5217\u6319\u578b\nenum class Cup { A, B, C };\n\n// \u30ab\u30c3\u30d7\u306e\u4f4d\u7f6e\u3092\u5165\u308c\u66ff\u3048\u308b\u95a2\u6570\nvoid exchangeCups(Cup& cup1, Cup& cup2) {\n    // \u30ab\u30c3\u30d7\u306e\u4e2d\u8eab\u3092\u5165\u308c\u66ff\u3048\u308b\n    swap(cup1.ball, cup2.ball);\n    // \u30ab\u30c3\u30d7\u306e\u4f4d\u7f6e\u3092\u5165\u308c\u66ff\u3048\u308b\n    swap(cup1.position, cup2.position);\n}\n\n// \u30dc\u30fc\u30eb\u304c\u5165\u3063\u3066\u3044\u308b\u30ab\u30c3\u30d7\u306e\u4f4d\u7f6e\u3092\u8fd4\u3059\u95a2\u6570\nCup findBall() {\n    // \u30ab\u30c3\u30d7\u306e\u4f4d\u7f6e\u3092\u8aad\u307f\u8fbc\u3080\n    Cup cup1, cup2;\n    cin >> cup1.position >> cup2.position;\n    // \u30ab\u30c3\u30d7\u306e\u4f4d\u7f6e\u3092\u5165\u308c\u66ff\u3048\u308b\n    exchangeCups(cup1, cup2);\n    // \u30ab\u30c3\u30d7\u306e\u4f4d\u7f6e\u3092\u8aad\u307f\u8fbc\u3080\n    cin >> cup1.position >> cup2.position;\n    // \u30dc\u30fc\u30eb\u304c\u5165\u3063\u3066\u3044\u308b\u30ab\u30c3\u30d7\u306e\u4f4d\u7f6e\u3092\u8fd4\u3059\n    return cup1.position;\n}\n\nint main() {\n    // \u30dc\u30fc\u30eb\u304c\u5165\u3063\u3066\u3044\u308b\u30ab\u30c3\u30d7\u306e\u4f4d\u7f6e\u3092\u8aad\u307f\u8fbc\u3080\n    Cup ball = findBall();\n    // \u30dc\u30fc\u30eb\u304c\u5165\u3063\u3066\u3044\u308b\u30ab\u30c3\u30d7\u306e\u4f4d\u7f6e\u3092\u51fa\u529b\u3059\u308b\n    cout << \"The ball is in cup \" << ball << \".\" << endl;\n    return 0;\n}"
    },
    {
        "id": "p00048.html",
        "answer": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\n// Define a struct to represent a weight class\nstruct WeightClass {\n    double lower_limit;  // lower limit of the weight class in kg\n    double upper_limit;  // upper limit of the weight class in kg\n    string name;         // name of the weight class\n};\n\n// Define a vector to store the weight classes\nvector<WeightClass> weight_classes = {\n    {48.0, 51.0, \"light fly\"},\n    {51.0, 54.0, \"fly\"},\n    {54.0, 57.0, \"bantam\"},\n    {57.0, 60.0, \"feather\"},\n    {60.0, 64.0, \"light\"},\n    {64.0, 69.0, \"light welter\"},\n    {69.0, 75.0, \"welter\"},\n    {75.0, 81.0, \"light middle\"},\n    {81.0, 91.0, \"middle\"},\n    {91.0, 150.0, \"light heavy\"},\n    {150.0, 150.0, \"heavy\"}\n};\n\n// Define a function to determine the weight class\nstring getWeightClass(double weight) {\n    for (const auto& wc : weight_classes) {\n        if (weight >= wc.lower_limit && weight <= wc.upper_limit) {\n            return wc.name;\n        }\n    }\n    return \"Invalid weight\";\n}\n\nint main() {\n    double weight;\n    cout << \"Enter your weight in kg: \";\n    cin >> weight;\n\n    string weight_class = getWeightClass(weight);\n    cout << \"Your weight class is: \" << weight_class << endl;\n\n    return 0;\n}"
    },
    {
        "id": "p00049.html",
        "answer": "cpp\n#include <iostream>\n#include <string>\n#include <vector>\n\nusing namespace std;\n\n// Function to count the number of each blood type\nvector<int> countBloodTypes(vector<string> bloodTypes) {\n    vector<int> counts(4, 0); // A, B, AB, O\n    for (const string& type : bloodTypes) {\n        switch (type[0]) {\n            case 'A':\n                counts[0]++;\n                break;\n            case 'B':\n                counts[1]++;\n                break;\n            case 'AB':\n                counts[2]++;\n                break;\n            case 'O':\n                counts[3]++;\n                break;\n        }\n    }\n    return counts;\n}\n\nint main() {\n    // Read the number of students and their blood types\n    int numStudents;\n    cin >> numStudents;\n    vector<string> bloodTypes(numStudents);\n    for (int i = 0; i < numStudents; i++) {\n        cin >> bloodTypes[i];\n    }\n\n    // Count the number of each blood type\n    vector<int> counts = countBloodTypes(bloodTypes);\n\n    // Output the results\n    cout << \"A: \" << counts[0] << endl;\n    cout << \"B: \" << counts[1] << endl;\n    cout << \"AB: \" << counts[2] << endl;\n    cout << \"O: \" << counts[3] << endl;\n\n    return 0;\n}"
    },
    {
        "id": "p00050.html",
        "answer": "#include <iostream>\n#include <string>\n\nint main() {\n    std::string sentence;\n    std::cout << \"Enter a sentence: \";\n    std::getline(std::cin, sentence);\n\n    // Replace all occurrences of \"apple\" with \"peach\"\n    std::string::size_type applePos = sentence.find(\"apple\");\n    while (applePos != std::string::npos) {\n        sentence.replace(applePos, 5, \"peach\");\n        applePos = sentence.find(\"apple\", applePos + 1);\n    }\n\n    // Replace all occurrences of \"peach\" with \"apple\"\n    std::string::size_type peachPos = sentence.find(\"peach\");\n    while (peachPos != std::string::npos) {\n        sentence.replace(peachPos, 5, \"apple\");\n        peachPos = sentence.find(\"peach\", peachPos + 1);\n    }\n\n    std::cout << \"Modified sentence: \" << sentence << std::endl;\n    return 0;\n}"
    },
    {
        "id": "p00051.html",
        "answer": ""
    },
    {
        "id": "p00052.html",
        "answer": "#include <iostream>\n\nint main() {\n    int n;\n    while (true) {\n        std::cin >> n;\n        if (n == 0) break;\n        int factorial = 1;\n        for (int i = n - 1; i >= 1; i--) {\n            factorial *= i;\n        }\n        int zeros = 0;\n        while (factorial % 10 == 0) {\n            factorial /= 10;\n            zeros++;\n        }\n        std::cout << \"The number of zeros at the end of \" << n! << \" is \" << zeros << std::endl;\n    }\n    return 0;\n}"
    },
    {
        "id": "p00053.html",
        "answer": "#include <iostream>\n\nusing namespace std;\n\nint main() {\n    int n;\n    cin >> n;\n\n    // \u7d20\u6570\u306e\u548c\u3092\u8a08\u7b97\u3059\u308b\n    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n        int p = i;\n        while (p % 2 == 0) {\n            p /= 2;\n        }\n        sum += p;\n    }\n\n    // \u7d50\u679c\u3092\u51fa\u529b\u3059\u308b\n    cout << \"The sum of the first \" << n << \" prime numbers is: \" << sum << endl;\n\n    return 0;\n}"
    },
    {
        "id": "p00054.html",
        "answer": "#include <iostream>\n\nint main() {\n    int a, b, n;\n    int sum = 0;\n\n    // Read input values\n    std::cin >> a >> b >> n;\n\n    // Calculate the sum of digits up to n decimal places\n    for (int i = 1; i <= n; i++) {\n        int digit = (a / b) % 10;\n        sum += digit;\n    }\n\n    // Output the result\n    std::cout << \"The sum of digits up to \" << n << \" decimal places is: \" << sum << std::endl;\n\n    return 0;\n}"
    },
    {
        "id": "p00055.html",
        "answer": "#include <iostream>\n\ndouble sumSequence(double a) {\n    double sum = 0;\n    double current = a;\n    int i = 1;\n    while (i <= 10) {\n        if (i % 2 == 0) {\n            sum += 2 * current;\n        } else {\n            sum += 3 * current;\n        }\n        current = sum;\n        i++;\n    }\n    return sum;\n}\n\nint main() {\n    double a;\n    while (std::cin >> a) {\n        std::cout << \"s(10) = \" << sumSequence(a) << std::endl;\n    }\n    return 0;\n}"
    },
    {
        "id": "p00056.html",
        "answer": ""
    },
    {
        "id": "p00057.html",
        "answer": "// Define a constant for the maximum number of lines\nconst int MAX_LINES = 10000;\n\n// Function to calculate the maximum number of regions\nint maxRegions(int n) {\n  // Initialize a 2D array to store the number of regions for each line\n  int regions[n + 1][n + 1] = {};\n\n  // Loop through each possible combination of lines\n  for (int i = 1; i <= n; i++) {\n    for (int j = 1; j <= n; j++) {\n      // Calculate the number of regions formed by the current line\n      int currRegions = 0;\n      for (int k = 1; k <= n; k++) {\n        if (k != i && k != j) {\n          currRegions++;\n        }\n      }\n\n      // Update the maximum number of regions\n      regions[i][j] = max(regions[i][j], currRegions);\n    }\n  }\n\n  // Return the maximum number of regions\n  return *max_element(regions, regions + n + 1, [](int a, int b) { return a > b; });\n}\n\n// Main function to call the maxRegions function\nint main() {\n  int n;\n  cin >> n;\n  cout << maxRegions(n) << endl;\n  return 0;\n}"
    },
    {
        "id": "p00058.html",
        "answer": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint main() {\n    int xA, yA, xB, yB, xC, yC, xD, yD;\n    cin >> xA >> yA >> xB >> yB >> xC >> yC >> xD >> yD;\n\n    // Calculate the slope of line segment AB\n    double mAB = (yB - yA) / (xB - xA);\n\n    // Calculate the slope of line segment CD\n    double mCD = (yD - yC) / (xD - xC);\n\n    // Check if the slopes are equal\n    if (mAB == mCD) {\n        // If the slopes are equal, the line segments are parallel\n        // and do not intersect\n        cout << \"NO\" << endl;\n    } else {\n        // If the slopes are not equal, the line segments are not parallel\n        // and may intersect\n        double xIntersection = (xA + xB) / 2;\n        double yIntersection = (yA + yB) / 2;\n\n        // Check if the intersection point is between the two line segments\n        if (xIntersection >= min(xA, xB) && xIntersection <= max(xA, xB) &&\n            yIntersection >= min(yA, yB) && yIntersection <= max(yA, yB)) {\n            // If the intersection point is between the two line segments,\n            // then they intersect\n            cout << \"YES\" << endl;\n        } else {\n            // If the intersection point is not between the two line segments,\n            // then they do not intersect\n            cout << \"NO\" << endl;\n        }\n    }\n\n    return 0;\n}"
    },
    {
        "id": "p00059.html",
        "answer": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint main() {\n    int n; // number of datasets\n    cin >> n;\n\n    while (n--) {\n        double xa1, ya1, xa2, ya2, xb1, yb1, xb2, yb2;\n        cin >> xa1 >> ya1 >> xa2 >> ya2 >> xb1 >> yb1 >> xb2 >> yb2;\n\n        // Calculate the intersection point of the two rectangles\n        double x_intersect = max(xa1, xb1);\n        double y_intersect = max(ya1, yb1);\n\n        // Check if the rectangles overlap\n        if (x_intersect <= min(xa2, xb2) && y_intersect <= min(ya2, yb2)) {\n            cout << \"YES\" << endl;\n        } else {\n            cout << \"NO\" << endl;\n        }\n    }\n\n    return 0;\n}"
    },
    {
        "id": "p00060.html",
        "answer": "#include <iostream>\n#include <cstdlib>\n#include <ctime>\n\nusing namespace std;\n\nint main() {\n    int C1, C2, C3; // C1: player's 1st card, C2: player's 2nd card, C3: opponent's visible card\n    int total; // total value of player's cards\n    int oppTotal; // total value of opponent's cards\n    int probability; // probability of player's total value being less than or equal to 20\n\n    // read input data\n    cin >> C1 >> C2 >> C3;\n\n    // calculate total value of player's cards\n    total = C1 + C2;\n\n    // calculate total value of opponent's cards\n    oppTotal = C3;\n\n    // calculate probability of player's total value being less than or equal to 20\n    probability = (total + 10) % 20;\n\n    // output result\n    if (probability > 50) {\n        cout << \"YES\" << endl;\n    } else {\n        cout << \"NO\" << endl;\n    }\n\n    return 0;\n}"
    },
    {
        "id": "p00061.html",
        "answer": ""
    },
    {
        "id": "p00062.html",
        "answer": "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nint main() {\n    int numDatasets = 20; // maximum number of datasets\n    vector<int> data(numDatasets); // vector to store the input data\n    vector<int> bottomRow(numDatasets); // vector to store the bottom-most row\n\n    // read the input data\n    for (int i = 0; i < numDatasets; i++) {\n        string line;\n        cin >> line;\n        istringstream iss(line);\n        int num;\n        iss >> num;\n        data[i] = num;\n    }\n\n    // calculate the bottom-most row\n    for (int i = 0; i < numDatasets; i++) {\n        int sum = data[i] + data[i + 1];\n        sum %= 10;\n        bottomRow[i] = sum;\n    }\n\n    // output the bottom-most row\n    for (int i = 0; i < numDatasets; i++) {\n        cout << bottomRow[i] << endl;\n    }\n\n    return 0;\n}"
    },
    {
        "id": "p00063.html",
        "answer": "#include <iostream>\n#include <string>\n#include <algorithm>\n\nusing namespace std;\n\nint main() {\n    int n; // number of strings\n    string str; // current string\n    int symmetric_count = 0; // number of symmetric strings\n\n    // read the number of strings\n    cin >> n;\n\n    // read each string and check if it's symmetric\n    for (int i = 0; i < n; i++) {\n        cin >> str;\n        if (is_symmetric(str)) {\n            symmetric_count++;\n        }\n    }\n\n    // output the number of symmetric strings\n    cout << symmetric_count << endl;\n\n    return 0;\n}\n\n// check if a string is symmetric\nbool is_symmetric(string str) {\n    int left = 0; // index of first character\n    int right = str.size() - 1; // index of last character\n\n    while (left < right) {\n        if (str[left] != str[right]) {\n            return false;\n        }\n        left++;\n        right--;\n    }\n\n    return true;\n}"
    },
    {
        "id": "p00064.html",
        "answer": "#include <iostream>\n#include <string>\n#include <sstream>\n\nusing namespace std;\n\nint main() {\n    string article;\n    int secretNumber = 0;\n\n    // Read the article from the input\n    cin >> article;\n\n    // Tokenize the article into individual words\n    stringstream ss(article);\n    string word;\n    while (ss >> word) {\n        // Check if the word is a number\n        if (word.size() > 0 && word[0] >= '0' && word[0] <= '9') {\n            // Convert the word to an integer\n            int num = stoi(word);\n\n            // Add the number to the secret number\n            secretNumber += num;\n        }\n    }\n\n    // Output the secret number\n    cout << secretNumber << endl;\n\n    return 0;\n}"
    },
    {
        "id": "p00065.html",
        "answer": "#include <iostream>\n#include <string>\n#include <vector>\n#include <map>\n\nusing namespace std;\n\nint main() {\n    // \u3053\u306e\u6708\u306e\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u307f\n    vector<pair<int, int>> thisMonthData;\n    string line;\n    while (getline(cin, line)) {\n        stringstream ss(line);\n        int customerNumber;\n        int transactionDate;\n        ss >> customerNumber >> transactionDate;\n        thisMonthData.push_back({customerNumber, transactionDate});\n    }\n\n    // \u5148\u6708\u306e\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u307f\n    vector<pair<int, int>> lastMonthData;\n    while (getline(cin, line)) {\n        stringstream ss(line);\n        int customerNumber;\n        int transactionDate;\n        ss >> customerNumber >> transactionDate;\n        lastMonthData.push_back({customerNumber, transactionDate});\n    }\n\n    // \u5148\u6708\u306e\u30c7\u30fc\u30bf\u3092Map\u306b\u4fdd\u5b58\n    map<int, int> lastMonthMap;\n    for (const auto& data : lastMonthData) {\n        lastMonthMap[data.first] = data.second;\n    }\n\n    // \u3053\u306e\u6708\u306e\u30c7\u30fc\u30bf\u3092\u51e6\u7406\n    vector<pair<int, int>> result;\n    for (const auto& data : thisMonthData) {\n        int customerNumber = data.first;\n        int transactionDate = data.second;\n        if (lastMonthMap.count(customerNumber) > 0) {\n            int lastMonthTransactionDate = lastMonthMap[customerNumber];\n            if (transactionDate - lastMonthTransactionDate <= 31) {\n                // \u5148\u6708\u304b\u3089\uff12\u30f6\u6708\u9023\u7d9a\u3067\u53d6\u5f15\u306e\u3042\u308b\u4f1a\u793e\n                result.push_back({customerNumber, 2});\n            }\n        }\n    }\n\n    // \u7d50\u679c\u3092\u51fa\u529b\n    for (const auto& data : result) {\n        cout << data.first << \" \" << data.second << endl;\n    }\n\n    return 0;\n}"
    },
    {
        "id": "p00066.html",
        "answer": "cpp\n#include <iostream>\n#include <string>"
    },
    {
        "id": "p00067.html",
        "answer": "cpp\n#include <iostream>\n\nusing namespace std;\n\nint main() {\n    int row, col;\n    cin >> row >> col;"
    },
    {
        "id": "p00070.html",
        "answer": ""
    },
    {
        "id": "p00072.html",
        "answer": "cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nconst int INF = 1e9;\n\nint main() {\n    int n, m;\n    cin >> n >> m;\n    vector<pair<int, int>> graph(m);\n\n    for (int i = 0; i < m; i++) {\n        int a, b, d;\n        cin >> a >> b >> d;\n        graph[i] = {a, b};\n    }\n\n    int lanterns = 0;\n\n    // Find the minimum number of lanterns required\n    for (int i = 0; i < n; i++) {\n        int min_d = INF;\n        for (int j = 0; j < m; j++) {\n            if (graph[j].first == i) {\n                min_d = min(min_d, graph[j].second);\n            }\n        }\n        lanterns += min_d;\n    }\n\n    cout << lanterns << endl;\n\n    return 0;\n}"
    },
    {
        "id": "p00073.html",
        "answer": "#include <cmath>\n\nusing namespace std;\n\ndouble surfaceArea(double x, double h) {\n    // \u5e95\u9762\u306e\u9762\u7a4d\n    double baseArea = x * x;\n    // \u56db\u89d2\u3059\u3044\u306e\u9ad8\u3055\n    double height = h;\n    // \u5e95\u9762\u3068\u9802\u70b9\u3092\u7d50\u3076\u7dda\u5206\u306e\u9577\u3055\n    double slantHeight = sqrt(h * h + x * x);\n    // \u56db\u89d2\u3059\u3044\u306e\u8868\u9762\u7a4d\n    double surfaceArea = baseArea + 2 * (slantHeight * slantHeight);\n    return surfaceArea;\n}\n\nint main() {\n    double x, h;\n    while (cin >> x >> h) {\n        if (x == 0 && h == 0) break;\n        double area = surfaceArea(x, h);\n        cout << fixed << setprecision(4) << area << endl;\n    }\n    return 0;\n}"
    },
    {
        "id": "p00074.html",
        "answer": "#include <iostream>\n\nusing namespace std;\n\nint main() {\n    int t, h, s; // current time, minute, and second\n    int st = 120; // standard play mode recording time (120 minutes)\n    int lp = 360; // 3-time long play mode recording time (360 minutes)\n\n    cin >> t >> h >> s;\n\n    // calculate remaining time in standard play mode\n    int remaining_st = st - (t * 60 + h * 60 + s);\n\n    // calculate remaining time in 3-time long play mode\n    int remaining_lp = lp - (t * 60 + h * 60 + s);\n\n    // output remaining time in both modes\n    cout << \"Standard Play: \" << remaining_st / 60 << \":\" << remaining_st % 60 << \":\" << remaining_st % 60 << endl;\n    cout << \"3-Time Long Play: \" << remaining_lp / 60 << \":\" << remaining_lp % 60 << \":\" << remaining_lp % 60 << endl;\n\n    return 0;\n}"
    },
    {
        "id": "p00075.html",
        "answer": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint main() {\n    int numStudents;\n    cin >> numStudents;\n\n    for (int i = 0; i < numStudents; i++) {\n        int studentID, weight, height;\n        cin >> studentID >> weight >> height;\n\n        double bmi = weight / (height * height);\n\n        if (bmi >= 25) {\n            cout << studentID << endl;\n        }\n    }\n\n    return 0;\n}"
    },
    {
        "id": "p00076.html",
        "answer": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint main() {\n    int n;\n    cin >> n;\n\n    // \u53e4\u6587\u66f8\u306b\u66f8\u304b\u308c\u3066\u3044\u308b\u884c\u6570\u3092\u53d7\u3051\u53d6\u308b\n    while (n != -1) {\n        int x, y;\n        cin >> x >> y;\n\n        // \u753a\u5916\u308c\u306e\u4e95\u6238\u304b\u3089\u306e\u65b9\u5411\u3092\u8a08\u7b97\u3059\u308b\n        double direction = atan2(y, x) * 180 / M_PI;\n\n        // \u5b9d\u306e\u4f4d\u7f6e\u3092\u8a08\u7b97\u3059\u308b\n        double x_\u5b9d = x + cos(direction) * 1;\n        double y_\u5b9d = y + sin(direction) * 1;\n\n        // \u51fa\u529b\u3059\u308b\n        cout << \"town's well east \" << x_\u5b9d << \"m, north \" << y_\u5b9d << \"m\" << endl;\n\n        // \u6b21\u306e\u884c\u3092\u53d7\u3051\u53d6\u308b\n        cin >> n;\n    }\n\n    return 0;\n}"
    },
    {
        "id": "p00077.html",
        "answer": ""
    },
    {
        "id": "p00078.html",
        "answer": "cpp\n#include <iostream>\n#include < vector >\n\nusing namespace std;\n\n// Function to print the magic square\nvoid printMagicSquare(int n) {\n    vector<vector<int>> square(n, vector<int>(n));\n\n    // Initialize the square with 1s\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            square[i][j] = 1;\n        }\n    }\n\n    // Calculate the sum of each row, column, and diagonal\n    for (int i = 0; i < n; i++) {\n        int rowSum = 0;\n        int colSum = 0;\n        int diaSum = 0;\n\n        // Calculate row sum\n        for (int j = 0; j < n; j++) {\n            rowSum += square[i][j];\n        }\n\n        // Calculate column sum\n        for (int j = 0; j < n; j++) {\n            colSum += square[j][i];\n        }\n\n        // Calculate diagonal sum\n        for (int j = 0; j < n; j++) {\n            diaSum += square[i + j][j];\n        }\n\n        // Check if the sum is equal to the magic number\n        if (rowSum == colSum && rowSum == diaSum) {\n            // Print the magic square\n            for (int j = 0; j < n; j++) {\n                cout << square[i][j] << \" \";\n            }\n            cout << endl;\n        }\n    }\n}\n\n// Main function\nint main() {\n    int n;\n    cin >> n;\n\n    // Check if n is within the valid range\n    if (n >= 3 && n <= 15) {\n        printMagicSquare(n);\n    } else {\n        cout << \"Invalid input. n must be between 3 and 15.\" << endl;\n    }\n\n    return 0;\n}"
    },
    {
        "id": "p00079.html",
        "answer": "cpp\n#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint main() {\n    int n; // Number of vertices\n    double x[n], y[n]; // Coordinates of vertices\n\n    // Read coordinates of vertices\n    cin >> x[0] >> y[0];\n    for (int i = 1; i < n; i++) {\n        cin >> x[i] >> y[i];\n    }\n\n    // Calculate area of polygon\n    double area = 0;\n    for (int i = 0; i < n; i++) {\n        area += (x[i] * y[i + 1] - x[i + 1] * y[i]);\n    }\n    area /= 2;\n\n    // Output area\n    cout << \"Area: \" << area << endl;\n\n    return 0;\n}"
    },
    {
        "id": "p00080.html",
        "answer": "#include <iostream>\n#include <cmath>\n\nconst double eps = 0.00001;\n\ndouble cubicRoot(int q) {\n    double x = 1.0;\n    double prev_x = x;\n    double curr_x = x;\n    int n = 1;\n    while (std::abs(curr_x - prev_x) > eps * q) {\n        prev_x = curr_x;\n        curr_x = x - (curr_x * curr_x * curr_x - q) / (3 * curr_x * curr_x);\n        n++;\n    }\n    return curr_x;\n}\n\nint main() {\n    int q;\n    while (std::cin >> q) {\n        if (q == -1) break;\n        double x = cubicRoot(q);\n        std::cout << x << std::endl;\n    }\n    return 0;\n}"
    },
    {
        "id": "p00081.html",
        "answer": "#include <cmath>\n\nusing namespace std;\n\nstruct Point {\n    double x;\n    double y;\n};\n\nPoint symmetricPoint(Point P1, Point P2, Point Q) {\n    // Calculate the slope of the line passing through P1 and P2\n    double slope = (P2.y - P1.y) / (P2.x - P1.x);\n\n    // Calculate the intersection point of the line and the vertical line passing through Q\n    double x = (slope * (Q.y - P1.y) + P1.x) / (slope + 1);\n    double y = slope * (x - P1.x) + Q.y;\n\n    // Return the symmetric point\n    return Point{x, y};\n}\n\nint main() {\n    int numDatasets;\n    cin >> numDatasets;\n\n    while (numDatasets-- > 0) {\n        double x1, y1, x2, y2, xq, yq;\n        cin >> x1 >> y1 >> x2 >> y2 >> xq >> yq;\n\n        // Calculate the slope of the line passing through P1 and P2\n        double slope = (y2 - y1) / (x2 - x1);\n\n        // Calculate the intersection point of the line and the vertical line passing through Q\n        double x = (slope * (yq - y1) + x1) / (slope + 1);\n        double y = slope * (x - x1) + yq;\n\n        // Output the symmetric point\n        cout << x << \" \" << y << endl;\n    }\n\n    return 0;\n}"
    },
    {
        "id": "p00083.html",
        "answer": "#include <iostream>\n#include <cstdlib>\n#include <cstring>\n\nusing namespace std;\n\n// Function to convert Gregorian calendar to Japanese calendar\nvoid convertGregorianToJapanese(int gregorianYear, int gregorianMonth, int gregorianDay) {\n    int japaneseYear, japaneseMonth, japaneseDay;\n\n    // Convert Gregorian year to Japanese year\n    if (gregorianYear >= 1868) {\n        japaneseYear = gregorianYear - 1867;\n    } else {\n        japaneseYear = \"pre-meiji\";\n    }\n\n    // Convert Gregorian month to Japanese month\n    switch (gregorianMonth) {\n        case 1:\n            japaneseMonth = 12;\n            break;\n        case 2:\n            japaneseMonth = 1;\n            break;\n        case 3:\n            japaneseMonth = 2;\n            break;\n        case 4:\n            japaneseMonth = 3;\n            break;\n        case 5:\n            japaneseMonth = 4;\n            break;\n        case 6:\n            japaneseMonth = 5;\n            break;\n        case 7:\n            japaneseMonth = 6;\n            break;\n        case 8:\n            japaneseMonth = 7;\n            break;\n        case 9:\n            japaneseMonth = 8;\n            break;\n        case 10:\n            japaneseMonth = 9;\n            break;\n        case 11:\n            japaneseMonth = 10;\n            break;\n        case 12:\n            japaneseMonth = 11;\n            break;\n    }\n\n    // Convert Gregorian day to Japanese day\n    japaneseDay = gregorianDay;\n\n    // Output Japanese year, month, and day\n    cout << \"Heisei \" << japaneseYear << \" \" << japaneseMonth << \" \" << japaneseDay << endl;\n}\n\nint main() {\n    int gregorianYear, gregorianMonth, gregorianDay;\n\n    // Get input from user\n    cout << \"Enter year, month, and day (separated by spaces): \";\n    cin >> gregorianYear >> gregorianMonth >> gregorianDay;\n\n    // Convert Gregorian calendar to Japanese calendar\n    convertGregorianToJapanese(gregorianYear, gregorianMonth, gregorianDay);\n\n    return 0;\n}"
    },
    {
        "id": "p00084.html",
        "answer": "cpp\n// Input.txt: Input file containing the text to be processed\n// Output.txt: Output file containing the extracted words\n\n#include <iostream>\n#include <string>\n#include <vector>\n\nusing namespace std;\n\nvoid tokenize(string text, vector<string>& tokens) {\n\t// Remove punctuations and whitespaces from the text\n\ttext.erase(remove_punctuation(text.begin(), text.end()), text.end());\n\ttext.erase(remove_whitespace(text.begin(), text.end()), text.end());\n\n\t// Tokenize the text into individual words\n\tstringstream ss(text);\n\tstring word;\n\twhile (ss >> word) {\n\t\ttokens.push_back(word);\n\t}\n}\n\nint main() {\n\t// Read the input text from the file\n\tstring text;\n\tifstream input(\"input.txt\");\n\tif (input) {\n\t\tgetline(input, text);\n\t}\n\n\t// Tokenize the text into individual words\n\tvector<string> tokens;\n\ttokenize(text, tokens);\n\n\t// Output the tokens\n\tofstream output(\"output.txt\");\n\tif (output) {\n\t\tfor (const auto& token : tokens) {\n\t\t\toutput << token << \" \";\n\t\t}\n\t}\n\n\treturn 0;\n}\n\n// Helper function to remove punctuations from a string\nstring remove_punctuation(string::iterator begin, string::iterator end) {\n\tstring::iterator it = begin;\n\twhile (it != end) {\n\t\tif (ispunct(*it)) {\n\t\t\tit = end;\n\t\t}\n\t\t++it;\n\t}\n\treturn it;\n}\n\n// Helper function to remove whitespaces from a string\nstring remove_whitespace(string::iterator begin, string::iterator end) {\n\tstring::iterator it = begin;\n\twhile (it != end) {\n\t\tif (isspace(*it)) {\n\t\t\tit = end;\n\t\t}\n\t\t++it;\n\t}\n\treturn it;\n}"
    },
    {
        "id": "p00085.html",
        "answer": "cpp\nint n, m;\ncin >> n >> m;"
    },
    {
        "id": "p00089.html",
        "answer": "cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\n// Define a struct to represent a node in the graph\nstruct Node {\n    int value;\n    vector<int> neighbors;\n};\n\n// Function to calculate the maximum sum of a path from the root node to a leaf node\nint calculateMaxSum(Node root) {\n    // Base case: If the root node is a leaf node, return its value\n    if (root.neighbors.size() == 0) {\n        return root.value;\n    }\n\n    // Otherwise, calculate the maximum sum of the left and right subtrees\n    int leftMaxSum = calculateMaxSum(root.neighbors[0]);\n    int rightMaxSum = calculateMaxSum(root.neighbors[1]);\n\n    // Calculate the maximum sum of the current node and its neighbors\n    int maxSum = max(leftMaxSum, rightMaxSum);\n\n    // Add the value of the current node to the maximum sum\n    maxSum += root.value;\n\n    return maxSum;\n}\n\n// Function to read the input and create a graph\nvector<Node> readInput(string input) {\n    vector<Node> graph;\n\n    // Split the input into lines\n    stringstream ss(input);\n    string line;\n    while (getline(ss, line)) {\n        // Split the line into nodes\n        stringstream ss2(line);\n        int node;\n        vector<int> neighbors;\n        while (ss2 >> node) {\n            neighbors.push_back(node);\n        }\n\n        // Create a new node with its neighbors\n        Node newNode {node, neighbors};\n\n        // Add the new node to the graph\n        graph.push_back(newNode);\n    }\n\n    return graph;\n}\n\nint main() {\n    // Read the input and create the graph\n    string input = \"7\\n3,8\\n8,1,0\\n2,7,4,4\\n4,5,2,6,5\\n2,7,4,4\\n8,1,0\\n3,8\\n7\";\n    vector<Node> graph = readInput(input);\n\n    // Calculate the maximum sum of a path from the root node to a leaf node\n    int maxSum = calculateMaxSum(graph[0]);\n\n    // Output the maximum sum\n    cout << \"Maximum sum: \" << maxSum << endl;\n\n    return 0;\n}"
    },
    {
        "id": "p00091.html",
        "answer": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\n// Global variables\nconst int MAX_DROPS = 12;\nconst int GRID_SIZE = 10;\nconst int LARGE_DYE = 3;\nconst int MEDIUM_DYE = 2;\nconst int SMALL_DYE = 1;\n\n// Function to calculate the number of drops needed for a given area\nint calculateDrops(int x, int y, int size) {\n    int drops = 0;\n    for (int i = 0; i < size; i++) {\n        for (int j = 0; j < size; j++) {\n            if (x + i >= 0 && x + i < GRID_SIZE && y + j >= 0 && y + j < GRID_SIZE) {\n                drops++;\n            }\n        }\n    }\n    return drops;\n}\n\n// Function to print the solution\nvoid printSolution(vector<pair<int, int>>& drops) {\n    for (int i = 0; i < drops.size(); i++) {\n        cout << drops[i].first << \" \" << drops[i].second << \" \" << drops[i].third << endl;\n    }\n}\n\n// Main function\nint main() {\n    int n;\n    cin >> n;\n    vector<pair<int, int>> drops(n);\n    for (int i = 0; i < n; i++) {\n        int x, y, size;\n        cin >> x >> y >> size;\n        drops[i] = make_pair(x, y, size);\n    }\n    sort(drops.begin(), drops.end());\n    printSolution(drops);\n    return 0;\n}"
    },
    {
        "id": "p00092.html",
        "answer": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\n// Function to find the maximum length of a square\nint maxSquare(vector<vector<char>>& grid) {\n    int maxLength = 0;\n    for (int i = 0; i < grid.size(); i++) {\n        for (int j = 0; j < grid[i].size(); j++) {\n            if (grid[i][j] == '*') {\n                // If the current cell is marked, check the adjacent cells\n                int adjacentCells = countAdjacentMarkedCells(grid, i, j);\n                if (adjacentCells > 0) {\n                    // If there are marked cells adjacent to the current cell,\n                    // check if a square can be formed\n                    int squareLength = adjacentCells * 2 + 1;\n                    if (squareLength > maxLength) {\n                        maxLength = squareLength;\n                    }\n                }\n            }\n        }\n    }\n    return maxLength;\n}\n\n// Function to count the number of marked cells adjacent to a given cell\nint countAdjacentMarkedCells(vector<vector<char>>& grid, int row, int col) {\n    int adjacentCells = 0;\n    for (int i = row - 1; i <= row + 1; i++) {\n        for (int j = col - 1; j <= col + 1; j++) {\n            if (i >= 0 && i < grid.size() && j >= 0 && j < grid[i].size()) {\n                if (grid[i][j] == '*') {\n                    adjacentCells++;\n                }\n            }\n        }\n    }\n    return adjacentCells;\n}\n\nint main() {\n    int n;\n    cin >> n;\n    vector<vector<char>> grid(n, vector<char>(n));\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            char cell;\n            cin >> cell;\n            grid[i][j] = cell;\n        }\n    }\n    int maxLength = maxSquare(grid);\n    cout << \"Maximum square length: \" << maxLength << endl;\n    return 0;\n}"
    },
    {
        "id": "p00093.html",
        "answer": "#include <iostream>\n\nusing namespace std;\n\nint main() {\n    int a, b;\n    cin >> a >> b;\n\n    // \u897f\u66a6\u5e74\u304c4\u3067\u5272\u308a\u5207\u308c\u308b\u5e74\n    while (a <= b) {\n        int year = a;\n        if (year % 4 == 0 && year % 100 != 0) {\n            cout << \"\u897f\u66a6\" << year << endl;\n        } else if (year % 400 == 0) {\n            cout << \"\u897f\u66a6\" << year << endl;\n        } else {\n            cout << \"NA\" << endl;\n        }\n        a++;\n    }\n\n    return 0;\n}"
    },
    {
        "id": "p00094.html",
        "answer": "cpp\n#include <cmath>\n\nusing namespace std;\n\nint main() {\n    int a, b;\n    double s;\n\n    // \u5165\u529b\n    cin >> a >> b;\n\n    // \u8a08\u7b97\n    s = a * b * 3.305785;\n\n    // \u51fa\u529b\n    cout << \"S = \" << s << endl;\n\n    return 0;\n}"
    },
    {
        "id": "p00095.html",
        "answer": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nint main() {\n    int n;\n    cin >> n;\n    vector<pair<int, int>> participants(n);\n\n    for (int i = 0; i < n; i++) {\n        int a, v;\n        cin >> a >> v;\n        participants[i] = {a, v};\n    }\n\n    sort(participants.begin(), participants.end(),\n         [](const pair<int, int>& lhs, const pair<int, int>& rhs) {\n             return lhs.second > rhs.second;\n         });\n\n    cout << participants[0].first << \" \" << participants[0].second << endl;\n\n    return 0;\n}"
    },
    {
        "id": "p00096.html",
        "answer": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nint main() {\n    int n;\n    cin >> n;\n\n    // Initialize a vector to store the combinations\n    vector<vector<int>> combinations(n + 1);\n\n    // Base case: n = 0\n    combinations[0].push_back(vector<int>{0, 0, 0, 0});\n\n    // Iterate from n = 1 to 4000\n    for (int i = 1; i <= 4000; i++) {\n        // Initialize a vector to store the current combination\n        vector<int> combination;\n\n        // Iterate from 0 to 1000\n        for (int j = 0; j <= 1000; j++) {\n            // Check if the current combination sums up to n\n            if (combination.size() == 0 || combination[combination.size() - 1] + j <= n) {\n                // Add the current number to the combination\n                combination.push_back(j);\n\n                // If the combination sums up to n, break out of the inner loop\n                if (combination.size() == 4 && combination[0] + combination[1] + combination[2] + combination[3] == n) {\n                    break;\n                }\n            }\n        }\n\n        // If the current combination is valid, add it to the vector of combinations\n        if (combination.size() == 4) {\n            combinations[i].push_back(combination);\n        }\n    }\n\n    // Output the number of combinations for each n\n    for (int i = 0; i <= 4000; i++) {\n        cout << combinations[i].size() << endl;\n    }\n\n    return 0;\n}"
    },
    {
        "id": "p00097.html",
        "answer": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nint main() {\n    int n, s;\n    cin >> n >> s;\n    vector<int> nums(n);\n    int ways = 0;\n\n    // Initialize nums with n random integers between 0 and 100\n    for (int i = 0; i < n; i++) {\n        nums[i] = rand() % 101;\n    }\n\n    // Sort nums in ascending order\n    sort(nums.begin(), nums.end());\n\n    // Calculate ways to combine nums to sum up to s\n    ways = combination(nums, s);\n\n    // Output the number of ways\n    cout << ways << endl;\n\n    return 0;\n}\n\n// Function to calculate ways to combine nums to sum up to s\nint combination(vector<int> nums, int s) {\n    int ways = 1;\n    int curr_sum = 0;\n\n    // Iterate through nums and calculate ways to combine\n    // each number with the remaining numbers to sum up to s\n    for (int i = 0; i < nums.size(); i++) {\n        curr_sum += nums[i];\n        ways *= combination(nums, s - curr_sum);\n        curr_sum -= nums[i];\n    }\n\n    return ways;\n}"
    },
    {
        "id": "p00098.html",
        "answer": "#include <iostream>\n#include <climits>\nusing namespace std;\n\nconst int MAX_ROW = 100;\nconst int MAX_COL = 100;\nconst int MIN_VAL = -10000;\nconst int MAX_VAL = 10000;\n\nint main() {\n    int n;\n    cin >> n;\n    int a[n][n];\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            cin >> a[i][j];\n            if (a[i][j] < MIN_VAL) {\n                a[i][j] = MIN_VAL;\n            }\n            if (a[i][j] > MAX_VAL) {\n                a[i][j] = MAX_VAL;\n            }\n        }\n    }\n    int dp[MAX_ROW][MAX_COL];\n    memset(dp, 0, sizeof(dp));\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            if (a[i][j] == MIN_VAL) {\n                continue;\n            }\n            int max_sum = 0;\n            for (int k = 0; k < n; k++) {\n                if (k == i) {\n                    continue;\n                }\n                int temp = dp[i][k] + a[k][j];\n                if (temp > max_sum) {\n                    max_sum = temp;\n                }\n            }\n            dp[i][j] = max_sum;\n        }\n    }\n    int max_sum = 0;\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < n; j++) {\n            max_sum = max(max_sum, dp[i][j]);\n        }\n    }\n    cout << \"Maximum sum: \" << max_sum << endl;\n    return 0;\n}"
    },
    {
        "id": "p00100.html",
        "answer": "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nint main() {\n    int n;\n    cin >> n;\n    vector<pair<int, int>> data(n);\n\n    for (int i = 0; i < n; i++) {\n        int id, p, q;\n        cin >> id >> p >> q;\n        data[i] = {id, p * q};\n    }\n\n    sort(data.begin(), data.end(), [](const pair<int, int>& a, const pair<int, int>& b) {\n        return a.second > b.second;\n    });\n\n    int threshold = 1000000;\n    int count = 0;\n    for (const auto& d : data) {\n        if (d.second >= threshold) {\n            cout << d.first << \" \";\n            count++;\n        }\n    }\n\n    if (count == 0) {\n        cout << \"NA\";\n    }\n\n    return 0;\n}"
    },
    {
        "id": "p00101.html",
        "answer": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint main() {\n    int n; // number of datasets\n    string text; // input text\n    string correctedText; // corrected text\n\n    cin >> n; // read number of datasets\n\n    for (int i = 0; i < n; i++) {\n        cin >> text; // read input text\n        correctedText = replaceAll(text, \"Hoshino\", \"Hoshina\");\n        cout << correctedText << endl; // print corrected text\n    }\n\n    return 0;\n}\n\nstring replaceAll(string text, string find, string replace) {\n    string correctedText = text;\n    while (correctedText.find(find) != string::npos) {\n        correctedText.replace(correctedText.find(find), find.size(), replace);\n    }\n    return correctedText;\n}"
    },
    {
        "id": "p00102.html",
        "answer": ""
    },
    {
        "id": "p00103.html",
        "answer": "#include <iostream>\n#include <string>\n#include <vector>\n\nusing namespace std;\n\n// Global variables\nconst int MAX_EVENTS = 100;\nvector<string> events; // Store all events in an inning\nint score = 0; // Initialize score to 0\nint outs = 0; // Initialize number of outs to 0\n\n// Function to handle a single event\nvoid handleEvent(string event) {\n  if (event == \"HIT\") {\n    // Add a runner to first base\n    events.push_back(\"RUNNER_ON_FIRST\");\n  } else if (event == \"HOMERUN\") {\n    // Add points to the score and advance all runners to home base\n    score += events.size() + 1;\n    events.clear();\n  } else if (event == \"OUT\") {\n    // Increase number of outs\n    outs++;\n  }\n}\n\n// Main function\nint main() {\n  int n; // Number of datasets\n  cin >> n;\n\n  for (int i = 0; i < n; i++) {\n    // Read events in an inning\n    string event;\n    cin >> event;\n    events.push_back(event);\n\n    // Handle each event\n    handleEvent(event);\n\n    // Print score for this inning\n    cout << \"Inning \" << i+1 << \": \" << score << endl;\n\n    // Reset score and outs for next inning\n    score = 0;\n    outs = 0;\n  }\n\n  return 0;\n}"
    },
    {
        "id": "p00104.html",
        "answer": "#include <iostream>\n#include <vector>\n#include <string>\n#include <sstream>\n#include <cmath>\n\nusing namespace std;\n\n// Global variables\nconst int MAX_H = 101;\nconst int MAX_W = 101;\nconst char UP = '^';\nconst char DOWN = 'v';\nconst char LEFT = '<';\nconst char RIGHT = '>';\nconst char NOTHING = '.';\n\n// Function to get the next tile\nstring getNextTile(int x, int y, string tile) {\n    switch (tile[0]) {\n        case UP:\n            return string(1, '^') + getNextTile(x, y - 1, tile.substr(1));\n        case DOWN:\n            return string(1, 'v') + getNextTile(x, y + 1, tile.substr(1));\n        case LEFT:\n            return string(1, '<') + getNextTile(x - 1, y, tile.substr(1));\n        case RIGHT:\n            return string(1, '>') + getNextTile(x + 1, y, tile.substr(1));\n        case NOTHING:\n            return string(1, '.');\n        default:\n            return tile;\n    }\n}\n\n// Function to print the last position of the person\nvoid printLastPosition(int x, int y) {\n    cout << \"(\" << x << \", \" << y << \")\" << endl;\n}\n\n// Main function\nint main() {\n    int H, W;\n    cin >> H >> W;\n    vector<string> room(H);\n    for (int i = 0; i < H; i++) {\n        cin >> room[i];\n    }\n    int x = 0, y = 0;\n    string tile = room[0][0];\n    while (tile != NOTHING) {\n        tile = getNextTile(x, y, tile);\n        x += (tile[0] == LEFT || tile[0] == RIGHT) ? 1 : 0;\n        y += (tile[0] == UP || tile[0] == DOWN) ? 1 : 0;\n    }\n    printLastPosition(x, y);\n    return 0;\n}"
    },
    {
        "id": "p00105.html",
        "answer": "#include <iostream>\n#include <string>\n#include <map>\n#include <vector>\n\nusing namespace std;\n\n// A structure to represent a word and its page numbers\nstruct Word {\n    string word;\n    vector<int> pages;\n};\n\n// A function to read the input and create a map of words and their page numbers\nvoid readInput(map<string, vector<int>>& wordMap) {\n    string word;\n    int page;\n    while (cin >> word >> page) {\n        wordMap[word].push_back(page);\n    }\n}\n\n// A function to print the output in the required format\nvoid printOutput(const map<string, vector<int>>& wordMap) {\n    for (const auto& word : wordMap) {\n        cout << word.first << \" \";\n        for (const int page : word.second) {\n            cout << page << \" \";\n        }\n        cout << endl;\n    }\n}\n\nint main() {\n    map<string, vector<int>> wordMap;\n    readInput(wordMap);\n    printOutput(wordMap);\n    return 0;\n}"
    },
    {
        "id": "p00106.html",
        "answer": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nint main() {\n    int n;\n    cin >> n;\n    vector<int> prices(3);\n    prices[0] = 380;\n    prices[1] = 550;\n    prices[2] = 850;\n    vector<int> discounts(3);\n    discounts[0] = 20;\n    discounts[1] = 15;\n    discounts[2] = 12;\n    int minCost = INT_MAX;\n    int minShop = -1;\n    for (int i = 0; i < 3; i++) {\n        int shop = i;\n        int amount = n;\n        int cost = 0;\n        while (amount > 0) {\n            int bag = min(amount, prices[shop]);\n            cost += bag * prices[shop];\n            amount -= bag;\n            shop = (shop + 1) % 3;\n        }\n        if (cost < minCost) {\n            minCost = cost;\n            minShop = shop;\n        }\n    }\n    cout << \"The lowest cost is: \" << minCost << endl;\n    return 0;\n}"
    },
    {
        "id": "p00107.html",
        "answer": ""
    },
    {
        "id": "p00108.html",
        "answer": ""
    },
    {
        "id": "p00110.html",
        "answer": "#include <iostream>\n#include <string>\n#include <cmath>\nusing namespace std;\n\nint main() {\n    int t; // number of test cases\n    cin >> t;\n\n    while (t--) { // loop through test cases\n        string equation;\n        cin >> equation;\n\n        // find the first occurrence of 'X'\n        int x_index = equation.find('X');\n\n        // check if 'X' is not found\n        if (x_index == string::npos) {\n            cout << \"NA\" << endl;\n            continue;\n        }\n\n        // extract the number before 'X'\n        string num_before_x = equation.substr(0, x_index);\n\n        // extract the number after 'X'\n        string num_after_x = equation.substr(x_index + 1);\n\n        // convert the numbers to integers\n        int num_before_x_int = stoi(num_before_x);\n        int num_after_x_int = stoi(num_after_x);\n\n        // calculate the sum\n        int sum = num_before_x_int + num_after_x_int;\n\n        // check if the sum is within the range 0-9\n        if (sum < 0 || sum > 9) {\n            cout << \"NA\" << endl;\n            continue;\n        }\n\n        // print the result\n        cout << sum << endl;\n    }\n\n    return 0;\n}"
    },
    {
        "id": "p00111.html",
        "answer": "cpp\nstring caesarCipher(string str, int key) {\n    string encryptedStr = \"\";\n    for (char c : str) {\n        int index = c - 'A' + key;\n        if (index < 0) index += 26;\n        encryptedStr += char(index + 'A');\n    }\n    return encryptedStr;\n}"
    },
    {
        "id": "p00112.html",
        "answer": "cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nint main() {\n    int n;\n    cin >> n;\n\n    vector<int> arrivalTimes(n);\n    for (int i = 0; i < n; i++) {\n        cin >> arrivalTimes[i];\n    }\n\n    sort(arrivalTimes.begin(), arrivalTimes.end());\n\n    int totalWaitingTime = 0;\n    for (int i = 1; i < n; i++) {\n        totalWaitingTime += arrivalTimes[i] - arrivalTimes[i - 1];\n    }\n\n    cout << \"The total waiting time is: \" << totalWaitingTime << endl;\n\n    return 0;\n}"
    },
    {
        "id": "p00113.html",
        "answer": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint main() {\n    int p, q, rem, result;\n    cin >> p >> q;\n    result = p / q;\n    rem = result % 1;\n    if (rem == 0) {\n        cout << fixed << setprecision(80) << result << endl;\n    } else {\n        cout << fixed << setprecision(80) << result << \" \" << (rem * pow(10, 80 - rem.size())) << endl;\n        cout << \" \"^^\" << (rem * pow(10, 80 - rem.size())).size() << endl;\n    }\n    return 0;\n}"
    },
    {
        "id": "p00116.html",
        "answer": "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\n// Function to calculate the maximum rectangular area\nint maxArea(int H, int W, vector<vector<char>>& grid) {\n    int maxArea = 0;\n    for (int i = 0; i < H; i++) {\n        for (int j = 0; j < W; j++) {\n            if (grid[i][j] == '*') {\n                // Calculate the area of the current rectangle\n                int area = 1;\n                for (int k = i; k < H; k++) {\n                    for (int l = j; l < W; l++) {\n                        if (grid[k][l] == '*') {\n                            area++;\n                        } else {\n                            break;\n                        }\n                    }\n                }\n                maxArea = max(maxArea, area);\n            }\n        }\n    }\n    return maxArea;\n}\n\n// Main function\nint main() {\n    int H, W;\n    cin >> H >> W;\n    vector<vector<char>> grid(H, vector<char>(W, '.'));\n\n    // Read the grid data\n    for (int i = 0; i < H; i++) {\n        for (int j = 0; j < W; j++) {\n            char c;\n            cin >> c;\n            grid[i][j] = c;\n        }\n    }\n\n    // Calculate the maximum rectangular area\n    int maxArea = maxArea(H, W, grid);\n\n    // Output the result\n    cout << \"Maximum rectangular area: \" << maxArea << endl;\n\n    return 0;\n}"
    },
    {
        "id": "p00118.html",
        "answer": "#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nusing namespace std;\n\n// Global variables\nconst int MAX_H = 100;\nconst int MAX_W = 100;\nconst char RINGO = '@';\nconst char KAKI = '#';\nconst char MIKAN = '*';\n\n// Function to calculate the number of rows and columns\nvoid calculateDimensions(string map) {\n    int rows = 0;\n    int cols = 0;\n    for (char c : map) {\n        if (c == RINGO || c == KAKI || c == MIKAN) {\n            rows++;\n            cols++;\n        }\n    }\n    return rows, cols;\n}\n\n// Function to check if two adjacent cells are the same fruit\nbool areAdjacentCellsSameFruit(string map, int row, int col) {\n    int adjacentRow = row + 1;\n    int adjacentCol = col + 1;\n    if (adjacentRow >= map.size() || adjacentCol >= map[0].size()) {\n        return false;\n    }\n    char adjacentFruit = map[adjacentRow][adjacentCol];\n    return adjacentFruit == map[row][col];\n}\n\n// Function to merge adjacent cells with the same fruit\nvoid mergeSameFruitCells(string map) {\n    int rows = map.size();\n    int cols = map[0].size();\n    for (int i = 0; i < rows; i++) {\n        for (int j = 0; j < cols; j++) {\n            if (areAdjacentCellsSameFruit(map, i, j)) {\n                // Merge the two cells\n                map[i][j] = map[i][j + 1];\n                map[i + 1][j] = map[i][j];\n                // Update the dimensions\n                rows--;\n                cols--;\n            }\n        }\n    }\n}\n\n// Function to count the number of rows and columns after merging\nvoid countDimensions(string map) {\n    int rows = 0;\n    int cols = 0;\n    for (char c : map) {\n        if (c == RINGO || c == KAKI || c == MIKAN) {\n            rows++;\n            cols++;\n        }\n    }\n    return rows, cols;\n}\n\nint main() {\n    // Read the input map\n    string map;\n    cin >> map;\n    // Calculate the dimensions of the map\n    int rows, cols;\n    tie(rows, cols) = calculateDimensions(map);\n    // Merge adjacent cells with the same fruit\n    mergeSameFruitCells(map);\n    // Count the number of rows and columns after merging\n    int mergedRows, mergedCols;\n    tie(mergedRows, mergedCols) = countDimensions(map);\n    // Output the number of people who can receive a share\n    cout << mergedRows * mergedCols << endl;\n    return 0;\n}"
    },
    {
        "id": "p00119.html",
        "answer": "5 2\n1 4\n3 5\n4 2\n1 6\n6 4\n3 4"
    },
    {
        "id": "p00120.html",
        "answer": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\n// Function to calculate the diameter of a roll cake\nint diameter(int radius) {\n    return 2 * radius;\n}\n\n// Function to calculate the volume of a roll cake\nint volume(int radius) {\n    return 3.14 * radius * radius;\n}\n\n// Function to check if a set of roll cakes can fit inside a box\nbool canFit(int boxLength, int cakeRadii[], int numCakes) {\n    int totalVolume = 0;\n    for (int i = 0; i < numCakes; i++) {\n        totalVolume += volume(cakeRadii[i]);\n    }\n    return totalVolume <= boxLength;\n}\n\nint main() {\n    int boxLength;\n    cin >> boxLength;\n\n    // Get the radii of the roll cakes\n    int cakeRadii[12];\n    for (int i = 0; i < 12; i++) {\n        cin >> cakeRadii[i];\n    }\n\n    // Check if the roll cakes can fit inside the box\n    bool canFit = canFit(boxLength, cakeRadii, 12);\n\n    // Output \"OK\" if the roll cakes can fit, or \"NA\" if they can't\n    if (canFit) {\n        cout << \"OK\" << endl;\n    } else {\n        cout << \"NA\" << endl;\n    }\n\n    return 0;\n}"
    },
    {
        "id": "p00123.html",
        "answer": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\n// Function to calculate the badge level based on the input times\nstring getBadgeLevel(double t1, double t2) {\n    // AAA level\n    if (t1 <= 35 && t2 <= 110) return \"AAA\";\n    // AA level\n    if (t1 <= 37 && t2 <= 117) return \"AA\";\n    // A level\n    if (t1 <= 40 && t2 <= 123) return \"A\";\n    // B level\n    if (t1 <= 43 && t2 <= 129) return \"B\";\n    // C level\n    if (t1 <= 50 && t2 <= 145) return \"C\";\n    // D level\n    if (t1 <= 55 && t2 <= 156) return \"D\";\n    // E level\n    if (t1 <= 60 && t2 <= 180) return \"E\";\n    // NA\n    return \"NA\";\n}\n\nint main() {\n    double t1, t2;\n    cin >> t1 >> t2;\n    string badgeLevel = getBadgeLevel(t1, t2);\n    cout << badgeLevel << endl;\n    return 0;\n}"
    },
    {
        "id": "p00125.html",
        "answer": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nint main() {\n    int y1, m1, d1, y2, m2, d2;\n    cin >> y1 >> m1 >> d1 >> y2 >> m2 >> d2;\n\n    // Check if the first date is after the second date\n    if (y1 > y2 || (y1 == y2 && m1 > m2) || (y1 == y2 && m1 == m2 && d1 > d2)) {\n        cout << \"Error: First date is after second date\" << endl;\n        return 1;\n    }\n\n    // Calculate the difference between the two dates\n    int diff = (y2 - y1) * 365 + (m2 - m1) * 30 + (d2 - d1);\n\n    // Check if the first date is a leap year\n    if (y1 % 4 == 0 && y1 % 100 != 0) {\n        // Add an extra day for the leap year\n        diff++;\n    }\n\n    // Check if the second date is a leap year\n    if (y2 % 4 == 0 && y2 % 100 != 0) {\n        // Subtract an extra day for the leap year\n        diff--;\n    }\n\n    // Output the result\n    cout << \"Day(s): \" << diff << endl;\n\n    return 0;\n}"
    },
    {
        "id": "p00127.html",
        "answer": "#include <iostream>\n#include <string>\n#include <cctype>\n\nusing namespace std;\n\n// Function to convert a poke bell message to a regular string message\nstring pokeBellToStr(string message) {\n  // Define a map to convert numbers to letters\n  map<int, char> letterMap = {\n    {11, 'a'}, {15, 'o'}, {16, 'i'}, {17, 'u'}, {18, 'e'}, {19, 's'}, {20, 't'}, {21, 'r'}, {22, 'n'}, {23, 'd'}, {24, 'l'}, {25, 'c'}, {26, 'h'}, {27, 'b'}, {28, 'p'}, {29, 'q'}, {30, 'f'}, {31, 'g'}, {32, 'j'}, {33, 'k'}, {34, 'x'}, {35, 'y'}, {36, 'z'}\n  };\n\n  // Iterate through the message and convert each number to its corresponding letter\n  for (int i = 0; i < message.size(); i++) {\n    int num = message[i] - '0';\n    if (num < 10) {\n      // If the number is less than 10, it represents a letter\n      message[i] = letterMap[num];\n    } else if (num == 10) {\n      // If the number is 10, it represents a space\n      message[i] = ' ';\n    } else {\n      // If the number is greater than 10, it's an invalid character\n      message[i] = '?';\n    }\n  }\n\n  return message;\n}\n\n// Main function to read and convert messages\nint main() {\n  string message;\n  while (cin >> message) {\n    // Convert the poke bell message to a regular string message\n    string convertedMessage = pokeBellToStr(message);\n\n    // Output the converted message or \"NA\" if it contains invalid characters\n    if (convertedMessage.empty()) {\n      cout << \"NA\" << endl;\n    } else {\n      cout << convertedMessage << endl;\n    }\n  }\n\n  return 0;\n}"
    },
    {
        "id": "p00128.html",
        "answer": "#include <iostream>\n#include <string>\n\nusing namespace std;\n\n// Function to print a line of asterisks\nvoid printLine(int numAsterisks) {\n    for (int i = 0; i < numAsterisks; i++) {\n        cout << \"*\";\n    }\n    cout << endl;\n}\n\n// Function to print a row of asterisks\nvoid printRow(int numAsterisks, int numSpaces) {\n    for (int i = 0; i < numAsterisks; i++) {\n        cout << \"*\";\n    }\n    for (int i = 0; i < numSpaces; i++) {\n        cout << \" \";\n    }\n    cout << endl;\n}\n\nint main() {\n    int numTests;\n    cin >> numTests;\n\n    // Loop through each test case\n    for (int i = 0; i < numTests; i++) {\n        int numDigits;\n        cin >> numDigits;\n\n        // Print the row of asterisks for the top row\n        printRow(5, numDigits);\n\n        // Print the row of asterisks for the bottom row\n        printRow(5, numDigits);\n\n        // Print the middle row of asterisks\n        printLine(numDigits);\n\n        // Print a line of spaces\n        printLine(numDigits);\n\n        // Print the middle row of asterisks again\n        printLine(numDigits);\n\n        // Print the bottom row of asterisks\n        printRow(5, numDigits);\n\n        // Print a line of spaces\n        printLine(numDigits);\n\n        // Print the top row of asterisks again\n        printRow(5, numDigits);\n\n        cout << endl;\n    }\n\n    return 0;\n}"
    },
    {
        "id": "p00129.html",
        "answer": "#include <iostream>\n#include <cmath>\n\nusing namespace std;\n\nconst int MAX_WALL = 100;\nconst int MAX_POSITION = 100;\n\nstruct Wall {\n    int wx, wy, r;\n};\n\nstruct Position {\n    int tx, ty, sx, sy;\n};\n\nbool isVisible(Wall wall, Position position) {\n    // Calculate the distance between the wall and the position\n    int dx = wall.wx - position.tx;\n    int dy = wall.wy - position.ty;\n    int distance = sqrt(dx * dx + dy * dy);\n\n    // Check if the distance is less than or equal to the sum of the radii\n    return distance <= wall.r + position.sx;\n}\n\nint main() {\n    int n, m;\n    cin >> n >> m;\n\n    // Initialize the walls and positions\n    Wall walls[MAX_WALL];\n    Position positions[MAX_POSITION];\n\n    // Read the walls and positions\n    for (int i = 0; i < n; i++) {\n        cin >> walls[i].wx >> walls[i].wy >> walls[i].r;\n    }\n\n    for (int i = 0; i < m; i++) {\n        cin >> positions[i].tx >> positions[i].ty >> positions[i].sx >> positions[i].sy;\n    }\n\n    // Check if the positions are visible to each other\n    for (int i = 0; i < m; i++) {\n        for (int j = 0; j < m; j++) {\n            if (i != j && isVisible(walls[i], positions[j])) {\n                cout << \"Danger\" << endl;\n                return 0;\n            }\n        }\n    }\n\n    // If all positions are safe, print \"Safe\"\n    cout << \"Safe\" << endl;\n\n    return 0;\n}"
    },
    {
        "id": "p00130.html",
        "answer": "#include <iostream>\n#include <vector>\n#include <map>\n#include <string>\n\nusing namespace std;\n\n// A structure to represent a car in the train\nstruct Car {\n    char id; // The car's identifier\n    int position; // The car's position in the train\n    vector<int> connections; // The cars connected to this car\n};\n\n// A function to parse the movement records and build the train formation\nvoid buildTrain(vector<string> records) {\n    vector<Car> train;\n    map<char, int> carPositions;\n\n    // Iterate through the movement records\n    for (const string& record : records) {\n        // Extract the car identifiers and their positions in the train\n        char prevId = record[0];\n        char currId = record[1];\n        int prevPosition = carPositions[prevId];\n        int currPosition = carPositions[currId];\n\n        // Update the car positions and connections\n        carPositions[prevId] = prevPosition + 1;\n        carPositions[currId] = currPosition + 1;\n        train.push_back(Car{prevId, prevPosition, {currId}});\n        train.push_back(Car{currId, currPosition, {prevId}});\n    }\n\n    // Output the train formation\n    for (const Car& car : train) {\n        cout << car.id << \" \";\n    }\n    cout << endl;\n}\n\nint main() {\n    // Read the number of movement records\n    int n;\n    cin >> n;\n\n    // Read the movement records\n    vector<string> records(n);\n    for (int i = 0; i < n; i++) {\n        cin >> records[i];\n    }\n\n    // Build the train formation\n    buildTrain(records);\n\n    return 0;\n}"
    }
]